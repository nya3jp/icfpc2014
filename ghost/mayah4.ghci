;
; [0-127] is used fo
; [128] is used for random
; [129] 1 if initialized
; [130] my index
; [131] gx
; [132] gy
; [133] lx
; [134] ly
; [135] sx
; [136] xy
; [137] junction id
; [138] <unused>
; [139] right is prohibited
; [140] down is prohibited
; [141] left is prohibited
; [142] up is prohibited
; [143] my vitality
; [144] my direction
; Register A, B, C, D, E, F won't be preserved after the function call.
;

; OK
INITIALIZE_RANDOM_IF_NECESSARY:
        JEQ INITIALIZE, [129], 1
        INT 3
        MOV [128], A
        MOV [129], 1

; OK
INITIALIZE:
        INT 1
        MOV [133], A
        MOV [134], B
        INT 3
        MOV [130], A
        INT 4
        MOV [135], A
        MOV [136], B
        INT 3
        INT 5
        MOV [131], A
        MOV [132], B

        MUL A, 37
        ADD A, B
        DIV A, 4
        AND A, 63
        MOV [137], A

        INT 3
        INT 6
        MOV [143], A
        MOV [144], B

MAIN:
        ; If in fright mode, every one escape.
        JEQ FUNCTION_MAYBE_ESCAPE, [143], 1

        ; Check the enemy is in the same row.
        ; In this case, we try to follow the lambdaman.
        JEQ FUNCTION_MAYBE_CHASE_Y, [131], [133]
        JEQ FUNCTION_MAYBE_CHASE_X, [132], [134]

        ; Move randomly in 1/8.
        MOV G, MAIN_AFTER_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
MAIN_AFTER_RANDOM:
        DIV A, 16
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0

CHECK_JUNCTION_PROFIBITION:
        MOV A, [137]
        MOV B, [A]
        ADD B, 138
        MOV [139], 0
        MOV [140], 0
        MOV [141], 0
        MOV [142], 0
        MOV [B], 1
        MOV PC, FUNCTION_MAYBE_CHASE

; ----------------------------------------------------------------------

FUNCTION_MAYBE_CHASE:
        MOV G, FC_AFTER_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FC_AFTER_RANDOM:
        AND A, 1
        JEQ FUNCTION_CHASE_X, A, 0
        MOV PC, FUNCTION_CHASE_Y

; OK
FUNCTION_MAYBE_CHASE_X:
        MOV G, FMCX_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FMCX_RANDOM:
        DIV A, 8
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0
        MOV PC, FUNCTION_CHASE_X

; OK
FUNCTION_MAYBE_CHASE_Y:
        MOV G, FMCY_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FMCY_RANDOM:
        DIV A, 8
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0
        MOV PC, FUNCTION_CHASE_Y

; ----------------------------------------------------------------------

FUNCTION_MAYBE_ESCAPE:
        MOV H, 1
        INT 8
        MOV G, FE_AFTER_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FE_AFTER_RANDOM:
        AND A, 1
        JEQ FUNCTION_MAYBE_ESCAPE_X, A, 0
        MOV PC, FUNCTION_MAYBE_ESCAPE_Y

; OK
FUNCTION_MAYBE_ESCAPE_X:
        MOV G, FMEX_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FMEX_RANDOM:
        DIV A, 8
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0
        MOV PC, FUNCTION_ESCAPE_X

; OK
FUNCTION_MAYBE_ESCAPE_Y:
        MOV G, FMEY_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FMEY_RANDOM:
        DIV A, 8
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0
        MOV PC, FUNCTION_ESCAPE_Y

; ----------------------------------------------------------------------

; OK
FUNCTION_CHASE_X:
        JLT FUNCTION_GO_RIGHT, [131], [133]
        MOV PC, FUNCTION_GO_LEFT

; OK
FUNCTION_ESCAPE_X:
        JLT FUNCTION_GO_LEFT, [131], [133]
        MOV PC, FUNCTION_GO_RIGHT

; OK
FUNCTION_CHASE_Y:
        JLT FUNCTION_GO_DOWN, [132], [134]
        MOV PC, FUNCTION_GO_UP

FUNCTION_ESCAPE_Y:
        JLT FUNCTION_GO_UP, [132], [134]
        MOV PC, FUNCTION_GO_DOWN

; ----------------------------------------------------------------------

; OK
FUNCTION_MAKE_RANDOM:
        ; Generates a random number in Register A.
        ; RETURN in G

        ; take 3bit xor 8 bit.
        MOV A, [128]
        MOV B, A
        DIV A, 128
        DIV B, 4
        AND B, 1
        XOR B, A
        ;
        MOV A, [128]
        MUL A, 2
        OR  A, B
        ADD A, 130
        MOV [128], A
        MOV PC, G

; ----------------------------------------------------------------------

; OK
FUNCTION_RANDOM_MOVE:
        MOV G, RANDOM_MOVE_AFTER_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
RANDOM_MOVE_AFTER_RANDOM:
        DIV A, 16
        JEQ FUNCTION_GO_UP, A, 0
        JEQ FUNCTION_GO_RIGHT, A, 1
        JEQ FUNCTION_GO_DOWN, A, 2
        MOV PC, FUNCTION_GO_LEFT

; ----------------------------------------------------------------------

; OK
FUNCTION_GO_UP:
        MOV [137], 4
        MOV A, 0
        INT 0
        HLT

; OK
FUNCTION_GO_RIGHT:
        MOV [137], 1
        MOV A, 1
        INT 0
        HLT

; OK
FUNCTION_GO_DOWN:
        MOV [137], 2
        MOV A, 2
        INT 0
        HLT

; OK
FUNCTION_GO_LEFT:
        MOV [137], 3
        MOV A, 3
        INT 0
        HLT
