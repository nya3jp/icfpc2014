;
; [0-127] is used fo
; [128] is used for random
; [129] 1 if initialized
; [130] my index
; [131] gx
; [132] gy
; [133] lx
; [134] ly
; [135] sx
; [136] xy
; [137] junction id
; [138] <unused>
; [139] right is prohibited
; [140] down is prohibited
; [141] left is prohibited
; [142] up is prohibited
; [143] my vitality
; [144] my direction
; Register A, B, C, D, E, F won't be preserved after the function call.
;

; OK
INITIALIZE_RANDOM_IF_NECESSARY:
        JEQ INITIALIZE, [129], 1
        INT 3
        MOV [128], A
        MOV [129], 1

; OK
INITIALIZE:
        INT 1
        MOV [133], A
        MOV [134], B
        INT 3
        MOV [130], A
        INT 4
        MOV [135], A
        MOV [136], B
        INT 3
        INT 5
        MOV [131], A
        MOV [132], B

        MUL A, 37
        ADD A, B
        DIV A, 4
        AND A, 63
        MOV [137], A

        INT 3
        INT 6
        MOV [143], A
        MOV [144], B

        MOV [149], HOGE_RANDOM   ; random
        MOV [150], HOGE_CHASE    ; chase
        MOV [151], HOGE_JUNCTION   ; junction
        MOV [152], HOGE_BODDY   ; boddy

MAIN:
        ; If in fright mode, every one escapes.
        JEQ FUNCTION_MAYBE_ESCAPE, [143], 1

        MOV [145], 0
        MOV [146], 0
        MOV [147], 0
        MOV [148], 0

ADD_RANDOM_SCORE:
        MOV G, ADS_L1
        MOV PC, FUNCTION_MAKE_RANDOM
ADS_L1:
        DIV A, [149]
        MOV [145], A
        MOV G, ADS_L2
        MOV PC, FUNCTION_MAKE_RANDOM
ADS_L2:
        DIV A, [149]
        MOV [146], A
        MOV G, ADS_L3
        MOV PC, FUNCTION_MAKE_RANDOM
ADS_L3:
        DIV A, [149]
        MOV [147], A
        MOV G, ADS_L4
        MOV PC, FUNCTION_MAKE_RANDOM
ADS_L4:
        DIV A, [149]
        MOV [148], A

        MOV A, [145]
        MOV B, [146]
        MOV C, [147]
        MOV D, [148]
        MOV E, 1
        ;INT 8

;----------------------------------------------------------------------

CHECK_UP:
        MOV A, [132]
        SUB A, [134]
        JGT CHECK_DOWN, A, 127
        ;JLT CHECK_DOWN, A, 5
        ADD [145], [150]
CHECK_DOWN:
        MOV A, [134]
        SUB A, [132]
        JGT CHECK_LEFT, A, 127
        ;JLT CHECK_LEFT, A, 5
        ADD [147], [150]
CHECK_LEFT:
        MOV A, [131]
        SUB A, [133]
        JGT CHECK_RIGHT, A, 127
        ;JLT CHECK_RIGHT, A, 5
        ADD [148], [150]
CHECK_RIGHT:
        MOV A, [133]
        SUB A, [131]
        JGT CHECK_DONE, A, 127
        ;JLT CHECK_DONE, A, 5
        ADD [146], [150]

CHECK_DONE:

        MOV A, [145]
        MOV B, [146]
        MOV C, [147]
        MOV D, [148]
        MOV E, 2
        ;INT 8

;----------------------------------------------------------------------

CHECK_JUNCTION_PROHIBITION:
        MOV A, [137]
        MOV B, [A]

        MOV C, B
        DIV C, 4
        MUL C, 4
        SUB B, C
        ADD B, 145

        ;INT 8

        ADD [145], [151]
        ADD [146], [151]
        ADD [147], [151]
        ADD [148], [151]
        SUB [B], [151]

; ----------------------------------------------------------------------

CHECK_BODDY:
        MOV E, 0

CHECK_BODY_L0:
        ADD E, 1
        JGT CHECK_BODY_DONE, E, 3
        MOV A, [130]
        JGT CHECK_BODY_DONE, E, A
        SUB A, E
        INT 5
        MOV C, A
        MOV D, B
        INT 8
CHECK_BODY_UP:
        MOV A, [132]
        MOV B, C
        JGT CHECK_BODY_DOWN, A, B
        ADD A, 5
        JLT CHECK_BODY_DOWN, A, B
        ADD [145], [152]
CHECK_BODY_DOWN:
        MOV A, C
        MOV B, [132]
        JGT CHECK_BODY_LEFT, A, B
        ADD A, 5
        JLT CHECK_BODY_LEFT, A, B
        ADD [147], [152]
CHECK_BODY_LEFT:
        MOV A, [131]
        MOV B, C
        JGT CHECK_BODY_RIGHT, A, B
        ADD A, 5
        JLT CHECK_BODY_RIGHT, A, B
        ADD [146], [152]
CHECK_BODY_RIGHT:
        MOV A, C
        MOV B, [131]
        JGT CHECK_BODY_L0, A, B
        ADD A, 5
        JLT CHECK_BODY_L0, A, B
        ADD [148], [152]

        MOV PC, CHECK_BODY_L0

CHECK_BODY_DONE:
        MOV A, [145]
        MOV B, [146]
        MOV C, [147]
        MOV D, [148]
        MOV E, 2
        ;INT 8

        MOV PC, FINALIZE_DIRECTION

; ----------------------------------------------------------------------

FUNCTION_MAYBE_ESCAPE:
        MOV G, FE_AFTER_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FE_AFTER_RANDOM:
        AND A, 1
        JEQ FUNCTION_MAYBE_ESCAPE_X, A, 0
        MOV PC, FUNCTION_MAYBE_ESCAPE_Y

; OK
FUNCTION_MAYBE_ESCAPE_X:
        MOV G, FMEX_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FMEX_RANDOM:
        DIV A, 8
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0
        MOV PC, FUNCTION_ESCAPE_X

; OK
FUNCTION_MAYBE_ESCAPE_Y:
        MOV G, FMEY_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
FMEY_RANDOM:
        DIV A, 8
        AND A, 7
        JEQ FUNCTION_RANDOM_MOVE, A, 0
        MOV PC, FUNCTION_ESCAPE_Y

; OK
FUNCTION_ESCAPE_X:
        JLT FUNCTION_GO_LEFT, [131], [133]
        MOV PC, FUNCTION_GO_RIGHT

FUNCTION_ESCAPE_Y:
        JLT FUNCTION_GO_UP, [132], [134]
        MOV PC, FUNCTION_GO_DOWN

; ----------------------------------------------------------------------

; OK
; Generates a random number in Register A.
; B won't be preserved
; RETURN in G
FUNCTION_MAKE_RANDOM:
        ; take 3bit xor 8 bit.
        MOV A, [128]
        MOV B, A
        DIV A, 128
        DIV B, 4
        AND B, 1
        XOR B, A
        ;
        MOV A, [128]
        MUL A, 2
        OR  A, B
        ADD A, 130
        MOV [128], A
        MOV PC, G

; ----------------------------------------------------------------------

; OK
FUNCTION_RANDOM_MOVE:
        MOV G, RANDOM_MOVE_AFTER_RANDOM
        MOV PC, FUNCTION_MAKE_RANDOM
RANDOM_MOVE_AFTER_RANDOM:
        DIV A, 16
        JEQ FUNCTION_GO_UP, A, 0
        JEQ FUNCTION_GO_RIGHT, A, 1
        JEQ FUNCTION_GO_DOWN, A, 2
        MOV PC, FUNCTION_GO_LEFT

; ----------------------------------------------------------------------

FINALIZE_DIRECTION:
FD_L0:
        JGT FD_L1, [145], [146]
        MOV PC, FD_L2
FD_L1:
        JGT FD_L3, [147], [148]
        MOV PC, FD_L4
FD_L2:
        JGT FD_L5, [147], [148]
        MOV PC, FD_L6
FD_L3:
        JGT FD_L7, [145], [147]
        MOV PC, FD_L8
FD_L4:
        JGT FD_L9, [145], [148]
        MOV PC, FD_L10
FD_L5:
        JGT FD_L11, [146], [147]
        MOV PC, FD_L12
FD_L6:
        JGT FD_L13, [146], [148]
        MOV PC, FD_L14
FD_L7:
FD_L9:
        MOV PC, FUNCTION_GO_UP
FD_L11:
FD_L13:
        MOV PC, FUNCTION_GO_RIGHT
FD_L8:
FD_L12:
        MOV PC, FUNCTION_GO_DOWN
FD_L10:
FD_L14:
        MOV PC, FUNCTION_GO_LEFT

; ----------------------------------------------------------------------

; OK
FUNCTION_GO_UP:
        MOV B, [137]
        MOV [B], 4
        MOV A, 0
        INT 0
        HLT

; OK
FUNCTION_GO_RIGHT:
        MOV B, [137]
        MOV [B], 1
        MOV A, 1
        INT 0
        HLT

; OK
FUNCTION_GO_DOWN:
        MOV B, [137]
        MOV [B], 2
        MOV A, 2
        INT 0
        HLT

; OK
FUNCTION_GO_LEFT:
        MOV B, [137]
        MOV [B], 1
        MOV A, 3
        INT 0
        HLT
