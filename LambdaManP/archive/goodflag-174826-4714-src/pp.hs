import Data.Char
import Text.Printf
import Debug.Trace
import System.IO
import Control.Monad
import Data.Char
import Data.List

main :: IO ()
main = forever $ do
  s <- getLine
  cnv s
  hFlush stdout

toMat :: String -> (Int, [[Int]])
toMat s =
  let (tag: ns) = map read $ words $ map (\c -> if isDigit c then c else ' ') s
  in (tag, toMat' ns)

toMat' (len: con) = map f $ take len $ iterate toArr con

toArr (len: con) = drop len con

f (len: con) = take len con

bdprf = "; trace lambdaman: (100000,"
matprf = "; trace lambdaman: (100001,"

cnv s
  | bdprf `isPrefixOf` s = ppBd $ toMat $ drop (length bdprf) s
  | matprf `isPrefixOf` s = ppMat $ toMat $ drop (length matprf) s
  | otherwise = putStrLn s

ppBd (tag, bd) = do
  putStrLn $ "; trace Board "  ++ show tag
  mapM_ (putStrLn . f) bd
  where
  f ns = map g ns

  g 0 = '#'
  g 1 = ' '
  g 2 = '.'
  g 3 = 'o'
  g 4 = ' '
  g 5 = ' '
  g 6 = ' '

ppMat :: (Int, [[Int]]) -> IO ()
ppMat (tag, bd) = do
  putStrLn $ "; trace Matrix " ++ show tag
  mapM_ (putStrLn . unwords . f) bd
  where
    f ns = map (printf "%02d" . min 99) ns

-----

{-
99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 00 00 00 00 00 00 00 00 00 00 99 00 00 00 00 00 99 99 99 99 99 99
99 00 99 99 99 00 99 99 99 99 00 99 00 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 99 99 99 99 00 99 00 99 99 99 99 99 99 99 99 99 99
99 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 99 00 00 00 00 99
99 00 99 99 99 00 99 00 99 99 99 99 99 99 99 00 99 99 99 99 99 00 99
99 00 00 00 00 00 99 00 00 00 00 99 00 00 00 00 99 99 00 00 00 00 99
99 99 99 99 99 00 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 01 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 99 99 99 99 00 99 01 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99
99 00 00 00 00 00 00 00 00 00 00 99 99 99 99 99 99 01 00 00 00 00 99
99 00 99 99 99 00 99 99 99 99 00 99 99 99 99 99 99 00 99 99 99 00 99
99 01 00 00 99 00 00 00 00 00 00 01 01 00 00 00 00 00 99 00 00 01 99
99 99 99 00 99 00 99 00 99 99 99 99 99 99 99 00 99 00 99 00 99 99 99
99 00 00 00 00 00 99 00 00 00 00 99 00 00 00 00 99 00 00 00 00 00 99
99 00 99 99 99 99 99 99 99 99 00 99 00 99 99 99 99 99 99 99 99 00 99
99 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 99
99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99

00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 02 02 02 02 02 02 02 02 02 02 00 02 02 02 02 02 01 01 01 01 01 00
00 02 00 00 00 02 00 00 00 00 02 00 02 00 00 00 00 01 00 00 00 01 00
00 03 00 00 00 02 00 00 00 00 02 00 02 00 00 00 00 01 00 00 00 03 00
00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01 02 02 02 02 00
00 02 00 00 00 02 00 02 00 00 00 00 00 00 00 02 00 01 00 00 00 02 00
00 02 02 02 02 02 00 02 02 02 02 00 02 02 02 02 00 01 02 02 02 02 00
00 00 00 00 00 02 00 00 00 00 01 00 01 00 00 00 00 01 00 00 00 00 00
00 01 01 01 00 02 00 01 01 01 01 01 01 01 01 01 00 01 00 01 01 01 00
00 00 00 00 00 02 00 01 00 00 00 01 00 00 00 01 00 01 00 00 00 00 00
00 01 01 01 01 02 01 01 00 01 01 01 01 01 00 01 01 01 01 01 01 01 00
00 00 00 00 00 02 00 01 00 00 00 00 00 00 00 01 00 01 00 00 00 00 00
00 01 01 01 00 02 00 01 01 01 01 01 01 01 01 01 00 01 00 01 01 01 00
00 00 00 00 00 02 00 01 00 00 00 00 00 00 00 01 00 01 00 00 00 00 00
00 02 02 02 02 02 02 02 02 02 02 00 01 01 01 01 01 01 02 02 02 02 00
00 02 00 00 00 02 00 00 00 00 02 00 01 00 00 00 00 02 00 00 00 02 00
00 03 02 02 00 02 02 02 02 02 02 01 01 02 02 02 02 02 00 02 02 03 00
00 00 00 02 00 02 00 02 00 00 00 00 00 00 00 02 00 02 00 02 00 00 00
00 02 02 02 02 02 00 02 02 02 02 00 02 02 02 02 00 02 02 02 02 02 00
00 02 00 00 00 00 00 00 00 00 02 00 02 00 00 00 00 00 00 00 00 02 00
00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

-}
