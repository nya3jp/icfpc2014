    ; Register `H` used as a stack pointer, which grows downward.
    MOV H,255
    MOV [128],0
    INT 3
    INT 6
    MOV C,B
    INT 3
    INT 5
    MOV [H],5EA47E7E
    DEC H
    MOV PC,GET_DIRECTION_CANDIDATES
5EA47E7E:
    MOV [129],A
    MOV [130],B
    MOV [131],C
    INT 3
    INT 6
    JEQ FRIGHT,A,1
    JGT CHASE,[128],8
    MOV A,6
    MOV [H],EA320E0A
    DEC H
    MOV PC,RAND
EA320E0A:
    JGT XXXXXXXX,A,0
    JEQ XXXXXXXX,[131],4
    MOV A,[131]
    INT 0
    HLT
XXXXXXXX:
    MOV A,2
    MOV [H],BF03A571
    DEC H
    MOV PC,RAND
BF03A571:
    JGT YYYYYYYY,A,0
    JEQ YYYYYYYY,[130],4
    MOV A,[130]
    INT 0
    HLT
YYYYYYYY:
    MOV A,[129]
    AND A,3
    INT 0
    HLT
CHASE:
    MOV A,[129]
    AND A,3
    INT 0
    HLT
FRIGHT:
    JEQ 7A502EC1,[131],4
    MOV A,[131]
    INT 0
    HLT
7A502EC1:
    MOV A,[130]
    AND A,3
    INT 0
    HLT

RAND:
    MOV C,A
    INC C
    INT 3
    ADD [132],A
    MUL [132],37
    ADD [132],37
    MOV A,[132]
    MOV B,A
    DIV B,C
    MUL B,C
    SUB A,B
    INC H
    MOV PC,[H]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; GET_ADJACENT_COORDINATE: For given coordinate and direction index, returns
;                          the corresponding coordinate.
;   - In:
;     - Register `A`, X-ordinate.
;     - Register `B`, Y-ordinate.
;     - Register `C`, direction index (0 = north, 1 = east, 2 = south,
;       3 = west)
;   - Out:
;     - Register `A`, X-ordinate.
;     - Register `B`, Y-ordinate.
;   - Side effect: Register `C`, `D`, `E` are destroyed.
GET_ADJACENT_COORDINATE:
    MOV D,C
    MOV E,C
    AND C,1
    AND E,2
    SUB E,1
    MUL C,E
    SUB A,C
    SUB D,1
    AND D,1
    MUL D,E
    ADD B,D
    INC H
    MOV PC,[H]

IS_ADJACENT_COORDINATE_NON_WALL_SQUARE:
    MOV [H],A9F040E2
    DEC H
    MOV PC,GET_ADJACENT_COORDINATE
A9F040E2:
    INT 7
    INC H
    MOV PC,[H]

REVERSE_DIRECTION:
    ADD A,2
    AND A,3
    INC H
    MOV PC,[H]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; GET_DIRECTIONS_TO_FIRST_LAMBDAMAN: returns direction to the 1st lambdaman
; from a given coordinate.
;   - In:
;     - Register `A`, X-ordinate
;     - Register `B`, Y-ordinate
;   - Out:
;     - Register `A`, major direction to the 1st lambdaman (0 = north,
;       1 = east, 2 = south, 3 = west).
;     - Register `B`, minor direction to the 1st lambdaman (0 = north,
;       1 = east, 2 = south, 3 = west).
;   - Side effect: Register `C` and `D` are destroyed.
;   - Notes: coordinate difference in the major direction is greater than or
;            equal to one in minor direction.
GET_DIRECTIONS_TO_FIRST_LAMBDAMAN:
    MOV C,A
    MOV D,B
    INT 1
    SUB A,C
    SUB B,D
    MOV C,A
    MOV D,B
    MOV A,0
    JLT FC284D19,C,128
    ; The first lambdaman is left from the ghost.
    MOV A,2
FC284D19:
    ; The first lambdaman is right from the ghost.
    ADD A,1
    MOV B,0
    JLT 0EF670EF,D,128
    ; The first lambdaman is up from the ghost.
    MOV B,254
0EF670EF:
    ; The 1st lambdaman is down from the ghost.
    ADD B,2
    ; MOV C,abs(C)
    JLT 73FF22EB,C,128
    XOR C,255
    ADD C,1
73FF22EB:
    MOV [128],C
    ; MOV C,abc(C)
    JLT 30604BE8,D,128
    XOR D,255
    ADD D,1
30604BE8:
    ADD [128],D
    JGT D1D395BD,C,D
    MOV C,A
    MOV A,B
    MOV B,C
D1D395BD:
    INC H
    MOV PC,[H]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; GET_DIRECTION_CANDIDATES: returns directions in some order to the 1st
;                           lambdaman from a given coordinate.
;   - In:
;     - Register `A`, X-ordinate
;     - Register `B`, Y-ordinate
;     - Register `C`, Direction index
;   - Out:
;     - Register `A`, the 1st candidate for directions to the 1st lambdaman.
;     - Register `B`, the 2nd candidate for directions to the 1st lambdaman.
;     - Register `C`, the 3rd candidate for directions to the 1st lambdaman.
;   - Side effect: All registers (except for register `H`) are destroyed.
;   - Notes: The output is equal to `4`, which means the direction is
;     invalid.
GET_DIRECTION_CANDIDATES:
    MOV [H],A   ; X-ordinate parameter
    DEC H
    MOV [H],B   ; Y-ordinate parameter
    DEC H
    MOV [H],C   ; Direction index parameter
    DEC H
    MOV [H],080CC5E6
    DEC H
    MOV PC,GET_DIRECTIONS_TO_FIRST_LAMBDAMAN
080CC5E6:
    MOV [H],A   ; Major positive direction
    DEC H
    MOV [H],B   ; Minor positive direction
    DEC H
    MOV [H],B   ; Minor negative direction
    DEC H
    MOV [H],A   ; Major negative direction
    DEC H
    MOV [H],H
    ADD [H],4   ;
    DEC H
    MOV [H],H
    ADD [H],5   ;
    DEC H
    MOV A,H
    ADD A,7
    MOV A,[A]
    MOV [H],FD2D2D5E
    DEC H
    MOV PC,REVERSE_DIRECTION
FD2D2D5E:
    MOV B,H
    ADD B,7
    MOV [B],A
    MOV A,H
    ADD A,6
    MOV A,[A]
    MOV [H],D5FDE5F1
    DEC H
    MOV PC,REVERSE_DIRECTION
D5FDE5F1:
    MOV B,H
    ADD B,3
    MOV [B],A
    MOV A,H
    ADD A,5
    MOV A,[A]
    MOV [H],B1FBFA4D
    DEC H
    MOV PC,REVERSE_DIRECTION
B1FBFA4D:
    MOV B,H
    ADD B,4
    MOV [B],A
FOR_2D5E6622:
    MOV A,H
    ADD A,2
    MOV A,[A]
    MOV C,H
    ADD C,2
    JEQ END_FOR_2D5E6622,A,C
    MOV C,H
    ADD C,7
    JEQ 2D13E947,[A],[C]
    MOV PC,EA2346B4
2D13E947:
    MOV A,H
    ADD A,2
    DEC [A]
    MOV PC,FOR_2D5E6622
EA2346B4:
    MOV A,H
    ADD A,9
    MOV A,[A]
    MOV B,H
    ADD B,8
    MOV B,[B]
    MOV C,H
    ADD C,2
    MOV C,[C]
    MOV C,[C]
    MOV [H],8E91A626
    DEC H
    MOV PC,IS_ADJACENT_COORDINATE_NON_WALL_SQUARE
8E91A626:
    JGT AFB7584A,A,0
    MOV A,H
    ADD A,2
    DEC [A]
    MOV PC,FOR_2D5E6622
AFB7584A:
    MOV A,H
    ADD A,2
    MOV A,[A]
    MOV B,H
    ADD B,1
    MOV B,[B]
    MOV [B],[A]
    MOV A,H
    ADD A,2
    DEC [A]
    MOV B,H
    ADD B,1
    DEC [B]
    MOV PC,FOR_2D5E6622
END_FOR_2D5E6622:
    MOV A,H
    ADD A,2
    MOV A,[A]
    MOV B,H
    ADD B,1
    MOV B,[B]
FOR_7AC9C06B:
    JEQ END_FOR_7AC9C06B,B,A
    MOV [B],4
    DEC B
    MOV PC,FOR_7AC9C06B
END_FOR_7AC9C06B:
    MOV A,H
    ADD A,6
    MOV A,[A]
    MOV B,H
    ADD B,5
    MOV B,[B]
    MOV C,H
    ADD C,4
    MOV C,[C]
    ADD H,9
    INC H
    MOV PC,[H]
